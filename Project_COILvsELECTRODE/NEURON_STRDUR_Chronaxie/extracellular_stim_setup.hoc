// Modified by Brian Goodwin
// See ~/Project_NEURON_MODEL/AmatrudoWeaver_ModelFlowDiagram.gdraw'
//
// Edit Dates:
// 2013-05-23
// 2013-06-10

// ---------- POSITION ENCODING AND EXTRACELLULAR STIMULATION ----------
objref stimvec, rxvec //stimulation vector and
stimvec = new Vector(100) //is this just an empty vector then?
rxvec = new Vector(100)

objref fwav, ffem, ftemp
fwav = new File()
ffem = new File()
ftemp = new File()

// INSERT extracellular & xtra mechanisms -- for position encoding & extracellular stimulation
forall {
    if (!ismembrane("extracellular")) {
        insert extracellular
    }
    insert xtra
}

/****************
 NOTE:  Showing the shape-plot will tweak the pt3dadd() coordinates based on connections!!!
 SO THIS IS A VERY IMPORTANT STEP when comparing with original model!!!
 (and it must be done before 'interpxyz.hoc' is called, i.e., before x_xtra, y_xtra, z_xtra
 are determined)
 
 The following lines that are commented out must be uncommented to make coords.txt file 
 (required for the extracellular to work). Note the numbered items. The first time you 
 run the cell, you must uncomment the lines. You will get an error. Comment #1-4 (marked
 with "*****") again and restart NEURON and it should work. 
 ****************/
//objref sh // #1 *****
//sh = new PlotShape() // #2 *****
//sh.size(-300,300,-300,300) // #3 *****

// load required xtra files
load_file("interpxyz.hoc")	// only interpolates sections that have extracellular
load_file("setpointers.hoc")	// automatically calls grindaway() in interpxyz.hoc

// // COMMENT out the following line if the coords file has been created already
//load_file("write_coords_file.hoc") // #4 ***** (end) // creates "coords.txt" 

// create a bogus Point Process called electrode that will get the vectorplay
// values and pass them on (eventually to e_extracellular)
create electrode
objref exIClmp
electrode {
    exIClmp = new IClamp(.5)
    exIClmp.loc(0.5)
    exIClmp.del=0		//delay
    exIClmp.dur=1000
    exIClmp.amp=0 		//amplitude will be assigned thru vector play (see 'stimvec.play' below)
}

// is_xtra gets the extracellular values from the bogus Point Process - exIClmp


//        advance() will be used by RunControl, so here we update is_xtra with each time step
proc advance() {
    forall {
        if (ismembrane("xtra")) {   // avoids section ELECTRODE being called
            is_xtra = exIClmp.i*0.001*knob_amp  // units of is_xtra are unit-less, or in a user-defined normalized state
            // 0.001 is required to put ex_xtra in the correct units (mV)
            // knob_amp --> an amplitude scale factor -- THE KNOB
        }
    }
    fadvance()
}

// set pointer ex_xtra to e_extracellular
forall {
    if (ismembrane("xtra")) {
        for (x) if (x!=0 && x!=1) {
            //setpointer im_xtra(x), i_membrane(x)  //Not necessary for extracellular stim
            setpointer ex_xtra(x), e_extracellular(x)
        }
    }
}

//LOAD FILES that define rx_xtra (fem_name) and is_xtra (wav_name)

proc fem_load() {
    // rx_xtra (units = Volts), output of FEM model (post-interpolation) at each compartment for a unit stimulus (1V or 1mA
    // in the FEM model); to be read from a file
    ffem.ropen($s1)
    rxvec.scanf(ffem)
    ffem.close()
    
    // assign values in rxvec to rx_xtra of corresponding sections
    sidx=0
    forall {
        if (ismembrane("xtra")) {
            // avoid nodes at 0 and 1 ends, so as not to override values at internal nodes
            for (x) if ((x>0) && (x<1)) {
                rx_xtra(x) = rxvec.x[sidx]
                sidx=sidx+1
            }
        }
    }
}

proc wav_load() {
    // Put waveform into stimvec (exIClmp.amp will get a new value with each fadvance())
    fwav.ropen($s1)
    stimvec.scanf(fwav)
    fwav.close()
    
    stimvec.play(&exIClmp.amp, 0.01)
}
